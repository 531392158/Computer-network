OSI 七层模型
	物联网淑慧适用
	物理层
	数据链路层
		在四层模型中，物理层和数据链路层合称为网络接口层
		在不可靠的物理链路上提供可靠的传输，具体表示为：
			接受物理层的信号信息，将其封装成帧传送到上一层，反过来就是将上层传来的数据帧解释为物理信号，交由物理层传输。
			交换机在这一层工作
	网络层
		将网络地址转化成物理地址
		通过路由选择算法为分组选择路径
		路由器工作就在这一层
	传输层
	会话层
		在五层和四层模型中，会话层、表示层以及应用层统称为应用层
		顾名思义是针对某一会话的层级，主要作用有三个：建立会话、保持会话和断开会话
			建立会话需要验证身份鉴定权限等操作
			保持会话需要对会话进行维护，保证处于一个可通信状态
			断开会话就是释放会话资源
	表示层
	应用层

OSI 七层模型
	物联网淑慧适用
	物理层
	数据链路层
		在四层模型中，物理层和数据链路层合称为网络接口层
		在不可靠的物理链路上提供可靠的传输，具体表示为：
			接受物理层的信号信息，将其封装成帧传送到上一层，反过来就是将上层传来的数据帧解释为物理信号，交由物理层传输。
			交换机在这一层工作
	网络层
		将网络地址转化成物理地址
		通过路由选择算法为分组选择路径
		路由器工作就在这一层
	传输层
	会话层
		在五层和四层模型中，会话层、表示层以及应用层统称为应用层
		顾名思义是针对某一会话的层级，主要作用有三个：建立会话、保持会话和断开会话
			建立会话需要验证身份鉴定权限等操作
			保持会话需要对会话进行维护，保证处于一个可通信状态
			断开会话就是释放会话资源
	表示层
	应用层

TCP/IP五层协议
	物理层
	数据链路层
	网络层
	运输层
		作用：提供了进程间的逻辑通信，传输层会屏蔽网络层的细节，使得2个应用程序之间只存在一条由端到端的逻辑通信信道。
	应用层
		作用：提供应用层协议，如HTTP协议，FTP协议等等，方便应用程序之间进行通信

HTTPS
	https 的连接过程
		A 为客户端，B 为服务器
		1.A 向 B 发送 A 所支持的加密算法
		2.B 根据 A 发送的列表选择一套算法，并以证书的形式回发给 A
		3.A 解析 B 回发的证书，生成一个 A 的私钥
		4.A 使用 B 的公钥对 A 的私钥进行非对称加密（一下简称加密）
		5.A 将加密 A 私钥发送给 B
		6.B 收到 A 发送的加密 A 私钥后，用自己的公钥对加密 A 私钥进行解密----得到 A 私钥
		7.B 用 A 私钥对数据进行加密----得到密文
		8.B 将密文发送给 A
		9.A 用 A 私钥解析密文----得到数据

HTTP
	简述TLS/SSL，HTTP，HTTPS 的关系
		HTTP是一种通过浏览器和服务器进行数据交互、进行超文本传输的协议。
		SSL （Secure Sockets Layer）安全套接层，和 TLS 一样是用于在传输层为数据通讯提供安全支持的协议
		HTTPS 可以理解为 HTTP + SSL/TLS
	http 和 https
		http 传输的所有内容都是明文，并且客户端和服务器无法验证对方的身份。
		https 具有安全性的 ssl 加密传输协议，此外 https 协议需要到 ca 申请证书，一般都要收费
	http1.1 的改进
		HTTP1.1 默认开启长连接，在一个 TCP 上可以传送多个 HTTP 请求和响应。使用 TCP 长连接的方式改善了 1.0 短连接造成的性能开销
		支持管道网络运输，只要有第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。
	http的request格式
		request部分报文分三部分：请求行、请求头以及请求实体
			请求行包括：请求方法+请求的url+协议版本格式
			请求头包括一些附加信息
			请求实体一般用于存放需要的数据
	http 的 response 格式
		HTTP 相应报文分三部分：状态行、相应头部、相应正文
			状态行由协议版本、状态码和状态码描述组成
			相应头部包含一些附加信息
			相应正文包含详细的回传数据
	简述cookie
		session
			这里的 session 要和 cookie 对应说，cookie 是对应将信息存储在客户端本地，而 session 则是存储在对应的服务器。
			当客户端携带着 cookie 访问服务器的时候，服务器会根据 cookie 中记录的 session id 在本地 session 中查找对应的客户机的信息。
		HTTP协议本身是无状态的，为了使其能够处理更加复杂的逻辑，HTTP/1.1引入了Cookie来保存状态信息。
		Cookie是一个保存在本地的文件，这个文件保存了当前客户机访问这个Web时的身份等信息，后续再访问的时候，该网站可以直接通过Cookie进行识别。
			🌰：就好像第一次去银行办理业务，银行不认识你，所以需要核对你的各种信息。但是这次以后银行会给你一银行卡，这个银行卡里存储了你的各种信息，等你下次来的时候，银行直接核对你的银行卡就行了。
	Get方法参数有大小限制么
		一般HTTP协议里不限制参数大小，但是由于get请求是直接附加到地址栏里面的，因此会受限于地址栏的长度。
	Get 和 Post 的区别
		GET：指定资源，请求数据
		Post：向指定资源提交要被处理的数据

简述REST API
	表述性状态转移，即利用HTTP中get、post、put、delete以及其他的HTTP方法构成REST中数据资源的增删改查操作：
		Create ： POST
Read ： GET
Update ： PUT/PATCH
Delete： DELETE

TCP 和 UDP
	TCP 作为面向流协议，提供可靠的面向连接的传输服务，并且提供点对点通信。
	UDP 作为面向报文协议，不保证可靠交付，也没有点对点。只支持多播和广播。

TCP
	详细描述 TCP 三次握手过程
		一言蔽之：客户端发送 syn 包到服务器，并进入 syn-send 状态，等待确认；服务器收到 syn 包，需要确认 syn，同时自己也发送一个 syn 包，即发送 syn+ack 包，此时服务器进入 syn-recv 状态，客户端收到 syn+ack 包，向服务器发送确认包 ack，此时服务端和客户端同时进入 established 状态，完成三次握手
		第一次握手：客户端将标志位 SYN 置为 1，随机产生一个值序列号 seq=x，并将该数据报发送给服务端，随后进入 syn_sent 状态，等待服务器确认
		第二次握手：服务端收到数据包后由标志位SYN=1知道客户端请求建立连接，服务端将标志位SYN和 ACK都置为1，ack=x+1,随机产生一个值seq=y，并将该数据包发送给客户端以确认连接请求，服务端进入syn_rcvd状态。
		第三次握手:客户端收到确认后检查,如果正确则将标志位ACK为1，ack=y+1，并将该数据包发送给服务端，服务端进行检查如果正确则连接建立成功，客户端和服务端进入established状态，完成三次握手，随后客户端和服务端之间可以开始传输 数据了
	四次挥手
		一言蔽之：客户端想服务器发送一个 FIN，用来关闭客户端到服务器的数据传送，服务器收到 fin 后，返回一个 Ack 并进入，close wait 状态。服务器再向客户端发送一个 fin，用来关闭服务器到客户端的数据传送。
	为什么 TCP 可靠
		有三次握手和四次挥手的机制，滑动窗口和拥塞控制算法，保留了超时重传机制，对每一份报文都存在检验，保证了报文的有效性
	为什么挥手是四次
		TCP是全双工通信，服务器接到断开请求后不一定已经将所有信息都发送完了，只有当信息发送完毕后，服务器再向客户端发送一个断开请求，表示已经发送完毕，只有当两边都同意断开后，才能真正中断通信。
	为什么四次挥手释放连接时需要等待2MSL
		首先：MSL指的是报文最大生存时间，设置2MSL可以保证之前存在连接中的报文已经消失，不会影响接下来通信。
	SYN 攻击
		原理：利用 TCP 协议的缺陷，通过发送大量的半连接请求，抢占队列，占用内存和CPU 资源
		防范方法：缩短 SYN Timeout 的时间、记录 IP 地址，若短时间内大量收到来自于同一个 IP 的重复报文，则将该 IP 地址丢弃，不再接收数据。
	TCP 粘包
		指发送方发送的若干数据包在被接收到的时候粘到了一块。
			TCP是面向流协议，发送的单位是字节流，因此存在多个小尺寸数据被封装在一个tcp报文中发出去的可能性。
		解决办法：固定发送信息的长度，或者在每两个信息之间加入分隔符

Put和Delete的区别
	Put：更新某一资源
	Delete：删除某一资源

DNS
	DNS劫持
		DNS 是指将网页域名翻译成对应 IP 的一种方法
		DNS 劫持指攻击者篡改结果，使用户对域名的解析出错，识别成另一个无关的 IP
